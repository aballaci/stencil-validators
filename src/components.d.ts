/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  Validator,
  ValidatorEntry,
} from './validators';

declare global {

  namespace StencilComponents {
    interface AnimatedInput {
      'validate': () => void;
      'validator': Array<string | ValidatorEntry | Validator<string>>;
      'value': string;
    }
  }

  interface HTMLAnimatedInputElement extends StencilComponents.AnimatedInput, HTMLStencilElement {}

  var HTMLAnimatedInputElement: {
    prototype: HTMLAnimatedInputElement;
    new (): HTMLAnimatedInputElement;
  };
  interface HTMLElementTagNameMap {
    'animated-input': HTMLAnimatedInputElement;
  }
  interface ElementTagNameMap {
    'animated-input': HTMLAnimatedInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'animated-input': JSXElements.AnimatedInputAttributes;
    }
  }
  namespace JSXElements {
    export interface AnimatedInputAttributes extends HTMLAttributes {
      'onChanged'?: (event: CustomEvent<string>) => void;
      'validator'?: Array<string | ValidatorEntry | Validator<string>>;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyComponent {
      'validator': Array<string | ValidatorEntry | Validator<string>>;
      'value': string;
    }
  }

  interface HTMLMyComponentElement extends StencilComponents.MyComponent, HTMLStencilElement {}

  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };
  interface HTMLElementTagNameMap {
    'my-component': HTMLMyComponentElement;
  }
  interface ElementTagNameMap {
    'my-component': HTMLMyComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-component': JSXElements.MyComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface MyComponentAttributes extends HTMLAttributes {
      'onChanged'?: (event: CustomEvent<string>) => void;
      'validator'?: Array<string | ValidatorEntry | Validator<string>>;
      'value'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
